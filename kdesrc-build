#!/usr/bin/env perl

# Script to handle building KDE from source code.  All of the configuration is
# stored in the file ./kdesrc-buildrc (or ~/.kdesrc-buildrc, if that's not
# present).
#
# Please also see the documentation that should be included with this program,
# in the doc/ directory.
#
# Home page: https://kdesrc-build.kde.org/
#
# Copyright © 2003 - 2020 Michael Pyne. <mpyne@kde.org>
# Copyright © 2018 - 2020 Johan Ouwerkerk <jm.ouwerkerk@gmail.com>
# Copyright © 2005, 2006, 2008 - 2011 David Faure <faure@kde.org>
# Copyright © 2005 Thiago Macieira <thiago@kde.org>
# Copyright © 2006 Stephan Kulow <coolo@kde.org>
# Copyright © 2006, 2008 Dirk Mueller <mueller@kde.org>
# ... and possibly others. Check the git source repository for specifics.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 51
# Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

# Adding an option? Grep for 'defaultGlobalOptions' in ksb::BuildContext --mpyne

use 5.014; # Require Perl 5.14
use strict;
use warnings;

# On many container-based distros, even FindBin is missing to conserve space.
# But we can use File::Spec to do nearly the same.
my $RealBin;
my $modPath;

# The File::Spec calls have to run when parsing (i.e. in BEGIN) to make the
# 'use lib' below work (which itself implicitly uses BEGIN { })
BEGIN {
    use File::Spec;

    # resolve symlinks
    my $scriptPath = $0;
    for (1..16) {
        last unless -l $scriptPath;
        $scriptPath = readlink $scriptPath;
    }
    die "Too many symlinks followed looking for script" if -l $scriptPath;

    my ($volume, $directories, $script) = File::Spec->splitpath($scriptPath);

    $RealBin = File::Spec->catpath($volume, $directories, '');
    die "Couldn't find base directory!" unless $RealBin;

    # Use modules in git repo if running from git dir, otherwise assume
    # system install
    $modPath = File::Spec->rel2abs('modules', $RealBin);
    $modPath = ($RealBin =~ s,/bin/?$,/share/kdesrc-build/modules,r)
        unless -d $modPath;

    die "Couldn't find modules for kdesrc-build!" unless $modPath;
}

use lib "$modPath"; # Make ksb:: modules available

sub dumpError
{
    my $err = $@;
    open my $fh, '>>', "error-$$.log" or return;
    my $time = localtime;
    say $fh $time;
    say $fh $@;
}

# When running in a limited environment, we might not be able to load
# our modules although we can find them. In this case we should help user
# by setting up system dependencies.
eval {
    if (grep { $_ eq '--initial-setup' } @ARGV) {
        require ksb::FirstRun;
        require ksb::Debug;
        ksb::Debug::setColorfulOutput(1);
        exit ksb::FirstRun::setupUserSystem(File::Spec->rel2abs($RealBin));
    }
};

if ($@) {
    dumpError();
    say STDERR <<DONE;
* Unable to even load the simplistic initial setup support for some reason??

More detail might be available in error-$$.log

You could:
 File a bug https://bugs.kde.org/enter_bug.cgi?product=kdesrc-build
 Ask for help on Freenode IRC in the #kde channel
DONE
    exit 1;
}

# Even though the flow of execution should not make it here unless the modules
# we need are installed, we still cannot "use" the modules that might be
# missing on first use since just trying to parse/compile the code is then
# enough to cause errors.
eval {
    require Carp;
    require ksb::Debug;
    require ksb::Util;
    require ksb::Version;
    require ksb::Application;
    require ksb::BuildException;
};

if ($@) {
    dumpError();
    say STDERR <<DONE;
Couldn't load the base platform for kdesrc-build!
More detail might be available in error-$$.log
DONE

    if (! -e "kdesrc-buildrc" && ! -e "$ENV{HOME}/.kdesrc-buildrc") {
        say STDERR <<DONE;
It appears you've not run kdesrc-build before.

Please run "kdesrc-build --initial-setup" and kdesrc-build will guide you
through setting up required dependencies and environment setup.
DONE
    }
    exit 1;
}

ksb::Debug->import();
ksb::Util->import();
ksb::BuildException->import();
ksb::Version->import(qw(scriptVersion));
ksb::Application->import();

# Make Perl 'plain die' exceptions use Carp::confess instead of their core
# support. This is not supported by the Perl 5 authors but assuming it works
# will be better than the alternative backtrace we get (which is to say, none)
$SIG{__DIE__} = \&Carp::confess;

ksb::Version->path($RealBin);

# Script starts.

# Adding in a way to load all the functions without running the program to
# enable some kind of automated QA testing.
if (defined caller && caller eq 'test')
{
    my $scriptVersion = scriptVersion();
    say "kdesrc-build being run from testing framework, BRING IT.";
    say "kdesrc-build is version $scriptVersion";
    return 1;
}

my $app;
our @atexit_subs;

END {
    # Basically used to call the finish() handler but only when appropriate.
    foreach my $sub (@atexit_subs) {
        &$sub();
    }
}

# Use some exception handling to avoid ucky error messages
eval
{
    $app = ksb::Application->new(@ARGV);

    push @atexit_subs, sub { $app->finish(99) };
    my $result = $app->runAllModulePhases();

    @atexit_subs = (); # Clear exit handlers
    $app->finish($result);
};

if (my $err = $@)
{
    if (had_an_exception()) {
        print "kdesrc-build encountered an exceptional error condition:\n";
        print " ========\n";
        print "    $err\n";
        print " ========\n";
        print "\tCan't continue, so stopping now.\n";

        if ($err->{'exception_type'} eq 'Internal') {
            print "\nPlease submit a bug against kdesrc-build on https://bugs.kde.org/\n"
        }
    }
    else {
        # We encountered an error.
        print "Encountered an error in the execution of the script.\n";
        print "The error reported was $err\n";
        print "Please submit a bug against kdesrc-build on https://bugs.kde.org/\n";
    }

    exit 99;
}

# vim: set et sw=4 ts=4 fdm=marker:
