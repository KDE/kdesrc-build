<sect1 id="other-features">
<title>Other &kdesvn-build; features</title>

<sect2 id="changing-verbosity">
<title>Changing the amount of output from &kdesvn-build;</title>
<para>&kdesvn-build; has several options to control the amount of output the
script generates. In any case, errors will always be output.</para>

<itemizedlist>
<listitem><para>The <option>--quiet</option> option (short form is
<option>-q</option>) causes &kdesvn-build; to be mostly silent. Only important
messages, warnings, or errors will be shown. When available, build progress
information is still shown.</para></listitem>

<listitem><para>The <option>--really-quiet</option> option (no short form)
causes &kdesvn-build; to only display important warnings or errors while it is
running.</para></listitem>

<listitem><para>The <option>--verbose</option> option (short form is
<option>-v</option>) causes &kdesvn-build; to be very detailed in its
output.</para></listitem>

<listitem><para>The <option>--debug</option> option is for debugging purposes
only, it causes &kdesvn-build; to act as if <option>--verbose</option> was
turned on, causes commands to also output to the terminal, and will display
debugging information for many functions.</para></listitem>
</itemizedlist>

</sect2>

<sect2 id="kdesvn-build-color">
<title>Color output</title>
<para>When being run from &konsole; or a different terminal, &kdesvn-build;
will normally display with colorized test.</para>

<para>You can disable this by using the <option>--no-color</option> on the
command line, or by setting the &colorful-output; option in the <link linkend="configure-data">configuration file</link> to
<replaceable>false</replaceable>.
</para>

<informalexample>
<para>Disabling color output in the configuration file:</para>
<screen>
global
  colorful-output false
end global
</screen>
</informalexample>

</sect2>

<sect2 id="email-reports">
<title>E-mailing build failure reports</title>
<para>&kdesvn-build; can send a e-mail report to an e-mail address of your
choice when a module fails to build for whatever reason. The way it works
is that you choose an e-mail address that &kdesvn-build; will send from,
and an e-mail address to notify when there is an error.</para>

<para>&kdesvn-build; will then, at the end of a complete run, construct an
e-mail if there were any modules that failed to build. The e-mail will contain
an abbreviated failure log for each module. Only one e-mail is sent for a
run, even if 15 modules failed to build.
</para>

<para>This feature is not enabled by default. To enable it, you need to set
both the &email-address; and &email-on-compile-error; options. <option>email-address</option>
controls the address &kdesvn-build; sends from, and <option>email-on-compile-error</option>
controls where to send the e-mail message to.
</para>

<tip>
<para>&kdesvn-build; uses the Perl-standard Mail::Mailer module to send e-mail.
It is included with Perl 5.8, and is installable with Perl 5.6. Mail::Mailer
supports <application>Sendmail</application> (including <application>Sendmail</application>-compatible
e-mail clients), native <acronym>SMTP</acronym> transport, and <application>qmail</application>.
</para>
</tip>

<informalexample>
<para>Sending email from foo@example.com to bar@example.com on a build failure:</para>

<screen>
global
  email-address          foo@example.com    # From: address for any kdesvn-build e-mail
  email-on-compile-error bar@example.com    # To: address for build failure e-mail
end global
</screen>
</informalexample>

</sect2>

<sect2 id="deleting-build-dir">
<title>Removing unneeded directories after a build</title>
<para>Are you short on disk space but still want to run a bleeding-edge
&kde; checkout?  &kdesvn-build; can help reduce your disk usage when building
&kde; from &subversion;.</para>

<note><para>Be aware that building &kde; does take a lot of space. There are
several major space-using pieces when using &kdesvn-build;:</para></note>

<orderedlist>
<listitem><para>The actual source checkout can take up a fair amount of space.
The default modules take up about 1.6 gigabytes of on-disk space. You can reduce
this amount by making sure that you are only building as many modules as you
actually want. &kdesvn-build; won't delete source code from disk even if you
delete the entry from the <link linkend="configure-data">configuration file</link>, so make sure that you go and delete unused
source checkouts from the source directory. Note that the source files are
downloaded from the Internet, you <emphasis>should not</emphasis> delete them
if you are actually using them, at least until you are done using
&kdesvn-build;.</para>

<para>Also, if you already have a &Qt; installed by your distribution (and
the odds are good that you do), you probably don't need to install the
qt-copy module. That will shave about 200 megabytes off of the on-disk source
size.</para>

<para>One thing to note is that due to the way &subversion; works: there are actually
two files on disk for every file checked-out from the repository. &kdesvn-build;
does not have code at this point to try and minimize the source size when the
source is not being used.
</para>
</listitem>

<listitem>
<para>&kdesvn-build; will create a separate build directory to build the source
code in. Sometimes &kdesvn-build; will have to copy a source directory to
create a fake build directory. When this happens, space-saving symlinks are
used, so this should not be a hassle on disk space. The build directory will
typically be much larger than the source directory for a module. For example,
the build directory for kdebase is about 455 megabytes, whereas kdebase's
source is only around 195 megabytes.</para>

<para>Luckily, the build directory is not required after a module has
successfully been built and installed. &kdesvn-build; can automatically
remove the build directory after installing a module, see the examples below
for more information. Note that taking this step will make it impossible
for &kdesvn-build; to perform the time-saving incremental builds.</para>
</listitem>

<listitem><para>
Finally, there is disk space required for the actual installation of
&kde;, which doesn't run from the build directory. This typically takes less
space than the build directory. It is harder to get exact figures however.
</para></listitem>
</orderedlist>

<para>How do you reduce the space requirements of &kde;?  One way is to
use the proper compiler flags, to optimize for space reduction instead of
for speed. Another way, which can have a large effect, is to remove debugging
information from your &kde; build.
</para>

<warning><para>
You should be very sure you know what you are doing before deciding to remove
debugging information. Running bleeding-edge software means you are running
software which is potentially much more likely to crash than a stable release.
If you are running software without debugging information, it can be very
hard to create a good bug report to get your bug resolved, and you'll likely
have to re-enable debugging information for the affected application and
rebuild to help a developer fix the crash. So, remove debugging information
at your own risk!
</para></warning>

<informalexample>
<para>Removing the build directory after installation of a module. The source
directory is still kept, and debugging is enabled:</para>

<screen>
global
  configure-flags      --enable-debug
  remove-after-install builddir        # Remove build directory after install
end global
</screen>

<para>Removing the build directory after installation, without debugging
information, with size optimization.</para>

<screen>
global
  cxxflags             -Os             # Optimize for size
  configure-flags      --disable-debug
  remove-after-install builddir        # Remove build directory after install
end global
</screen>
</informalexample>
</sect2>

</sect1>
