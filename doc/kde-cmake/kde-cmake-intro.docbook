<sect1 id="kde-cmake-intro">
<title>Introduction to &cmake;</title>

<para>In March 2006, the &cmake; program
beat out several competitors and was selected to be the build system for &kde; 4, replacing the
autotools-based system that &kde; has used from the beginning.</para>

<para>A introduction to &cmake; page is available on the <ulink
url="http://techbase.kde.org/Development/Tutorials/CMake">&kde; TechBase</ulink>.
Basically, instead of running <userinput><command>make</command> <option>-f</option> 
<filename>Makefile.cvs</filename></userinput>, then <command>configure</command>,
then &unsermake; (or &make;), we simply run &cmake; and then &make;.
</para>

<para>&kdesvn-build; has support for &cmake;. A few features of &kdesvn-build;
were really features of the underlying buildsystem, including <link linkend="conf-inst-apps">inst-apps</link>,
<link linkend="conf-configure-flags">configure-flags</link>, 
and <link linkend="conf-do-not-compile">do-not-compile</link>. When equivalent
features are available, they are provided. For instance, the equivalent to the
configure-flags option is <link linkend="conf-cmake-options">cmake-options</link>, and the
<link linkend="conf-do-not-compile">do-not-compile</link> option is also supported for &cmake;
as of &kdesvn-build; version 1.6.3.
</para>

<para>However, some options (like <link linkend="conf-inst-apps">inst-apps</link>) have no direct
equivalent, and are disabled. Should I find a way to implement them with &cmake;
I will do so and re-enable the option. However, more or less everything works
the same.</para>

</sect1>
