<sect1 id="kde-modules-and-selection">
<title>Module Organization and selection</title>

<sect2 id="kde-layers">
<title>KDE Software Organization</title>

<para>
&kde; software is split into different components, many of which can be built
by &kdesrc-build;. Understanding this organization will help you properly
select the software modules that you want built.
</para>

<orderedlist>
<listitem><para>At the lowest level comes the &Qt; library, which is a
very powerful, cross-platform <quote>toolkit</quote> library. &kde; is based on
&Qt;, and some of the non-&kde; libraries required by &kde; are also based on
&Qt;. &kdesrc-build; can build &Qt;, or use the one already installed on your
system if it is a recent enough version.</para></listitem>

<listitem><para>On top of &Qt; are required libraries that are necessary for
&kde; software to work. Some of these libraries are not considered part of
&kde; itself due to their generic nature, but are still essential to the &kde;
Platform. These libraries tended to get combined into a single
<literal>kdesupport</literal> module.</para>

<note><para>As of &kde; Platform 4.6, many of the libraries in the kdesupport <!--FIXME this is outdated ->frameworks, workspace/Plasma, applications-->
module are being migrated over to the <ulink
url=" https://commits.kde.org/">&kde; git archive</ulink>, although they are still not
considered part of the Platform.</para></note>
</listitem>

<listitem><para>On top of these essential libraries comes the &kde; Platform.
These are the libraries that are required for &kde; applications to work. A
full desktop environment is not provided by the Platform however.
</para>

<para>For &kdesrc-build;, the Platform layer consists of the <literal>kdelibs</literal>,
<literal>kdepimlibs</literal>, and <literal>kde-runtime</literal> modules.</para>
</listitem>

<listitem><para>On top of the Platform, come several different things:</para>
    <itemizedlist>
        <listitem><para><quote>Third-party</quote> applications. These are
        applications that use the &kde; Platform but are not authored by or in
        association with the &kde; project.</para></listitem>

        <listitem><para>A full <quote>workspace</quote> desktop environment.
        This is what users normally see when they <quote>log-in to
        &kde;</quote>.  This is provided by the &plasma; Desktop, mostly in
        <literal>kde-workspace</literal>.  </para></listitem>

        <listitem><para>The &kde; Software Compilation. This is a collection of
        useful software included with the Platform and &plasma; Desktop,
        grouped into individual modules. These are the modules that have names
        starting with <literal>kde</literal>. For example,
        <literal>kdepim</literal> is a component of the Software Compilation
        that contains email, news-reading, calendar/organizational software,
        &etc;, while <literal>kdegames</literal> contains a collection of
        high-quality games to while away the time.</para></listitem>

        <listitem><para>Finally, there is a collection of software (also
        collected in modules) whose development is supported by &kde; resources
        (such as translation, source control, bug tracking, &etc;) but is not
        released by &kde; or considered part of the Software Compilation. These
        modules are known as <quote>Extragear</quote>, and have module names
        such as <literal>extragear/network</literal>. As with
        <literal>kdesupport</literal>, some of these Extragear applications are
        migrating to the <ulink
        url=" https://commits.kde.org/">&kde; git archive</ulink>.</para></listitem>
    </itemizedlist>
</listitem>
</orderedlist>
</sect2>

<sect2 id="selecting-modules">
<title>Selecting modules to build</title>

<para>Selecting which of the possible modules to build is controlled by
<link linkend="kdesrc-buildrc">the configuration file</link>.
After the <literal>global</literal> section is a list of modules to build,
bracketed by module ... end module lines. An example entry for a module is
shown in <xref linkend="conf-module-example"/>.</para>

<example id="conf-module-example">
<title>Example module entry in the configuration file</title>
<programlisting>
module <replaceable>module-name</replaceable>
    # Options for this module go here, example:
    <link linkend="conf-make-options">make-options</link> -j4 # Run 4 compiles at a time
end module
</programlisting>
</example>

<tip><para>It is possible to declare a module with no options. In fact, most of
your modules will likely be declared this way.</para></tip>

<para>&kdesrc-build; only builds the modules you have listed in your configuration
file. In addition, the modules are built in the order specified in the configuration
file. For this reason you should ensure that the order of modules in your
configuration file is consistent with the organization given in
<xref linkend="kde-layers"/>.</para>

<para>There is a sample file that comes with &kdesrc-build; called
<filename>kdesrc-buildrc-sample</filename>. It is recommended to copy this file
to a file called <filename>~/.kdesrc-buildrc</filename> (<emphasis>Note the
leading period in front of kdesrc-buildrc!</emphasis>). Afterwards, edit the
new file to adjust the default options to your liking. (Each option is described
in more detail in <xref linkend="kdesrc-buildrc"/>). The default modules
should be enough to ensure a fairly complete &kde; installation, however you
can remove many of the modules that show up after <literal>kdebase</literal>
if you'd like to save disk space or build time.</para>

</sect2>

<sect2 id="module-sets">
<title>Module Sets</title>

<para>&kdesrc-build; is usually able to guess where to download the source code
for a given module quite easily, by using your setting for <link
linkend="conf-svn-server">svn-server</link> and the module name for each module
to create a single Subversion URL, which describes exactly where to download
the source code from.</para>

<para>With the move to Git, many larger Subversion modules were further
sub-divided in the process, and there was no guarantee of where to find a
module based just on the module name. Because of this, a concept called
<quote>module sets</quote> was developed for &kdesrc-build; 1.12.1.</para>

<para>By using a module set, you can quickly declare many Git modules to be
downloaded and built, as if you'd typed out a separate module declaration for
each one. The <link linkend="conf-repository">repository</link> option is
handled specially to setup where each module is downloaded from, which every
other option contained in the module set is copied to every module generated
in this fashion.</para>

<example id="example-using-module-sets">
<title>Using module sets</title>
<programlisting>
global
    <option><link linkend="conf-git-repository-base">git-repository-base</link></option> <replaceable>kde-git</replaceable> <replaceable>kde:</replaceable>
end global

module <replaceable>qt</replaceable>
    # Options removed for brevity
end module

module-set <replaceable>kde-support-libs</replaceable>
    <option><link linkend="conf-repository">repository</link></option> <replaceable>kde-git</replaceable>
    <option><link linkend="conf-use-modules">use-modules</link></option> <replaceable>automoc</replaceable> <replaceable>attica</replaceable> <replaceable>akonadi</replaceable>
end module-set

# Other modules as necessary...
module <replaceable>kdesupport</replaceable>
end module
</programlisting>
</example>

<para>In <xref linkend="example-using-module-sets"/> a brief module set is
shown.  When &kdesrc-build; encounters this module set, it acts as if, for
every module given in <option>use-modules</option>, that an individual module
has been declared, with its <option>repository</option> equal to the
module-set's <option>repository</option> followed immediately by the given
module name.</para>

<para>In addition, other options can be passed in a module set, which are
copied to every new module that is created this way. By using module-set it is
possible to quickly declare many Git modules that are all based on the same
repository URL. In addition, since &kdesrc-build; 1.13, it is possible to
give module-sets a name (as shown in the example), which allows you to quickly
refer to the entire group of modules from the command line.</para>

<note><para>Module sets are used in supporting module downloads from
the &kde; <ulink url="https://commits.kde.org/">&kde; git archive</ulink>
module database. See also <xref linkend="kde-projects-module-sets"/>.
</para></note>

<para>Module sets use the options <simplelist><member><link
linkend="conf-git-repository-base">git-repository-base</link></member>
<member><link
linkend="conf-use-modules">use-modules</link></member></simplelist></para>
</sect2>

<sect2 id="kde-projects-module-sets">
<title>Automatically finding modules from the official &kde; module
database</title>

<para>With the migration of &kde; source code to be hosted on git.kde.org,
there has been an explosive growth in the number of modules (for instance,
a single Subversion module called <literal>kdegraphics</literal> becomes
16 different Git modules).</para>

<para>This was done mostly because each Git module contains the entire project
history (this is actually less wasteful of disk space than it sounds for the
vast majority of &kde; repositories as &git; is highly efficient at storing
repositories).</para>

<para>&kde; allows for grouping Git repositories into collections
of related modules (e.g. kdegraphics). These modules can themselves be grouped
(e.g. &kde; Software Compilation). Git doesn't recognize these groupings, but
&kdesrc-build; can be configured to handle these groups.</para>

<para>The way this is done is by using <link linkend="module-sets">module
sets</link>. Instead of using a specific <literal>git://</literal> repository,
or a repository name created by <link
linkend="conf-git-repository-base">git-repository-base</link>, a special
repository name, <quote><literal>kde-projects</literal></quote> is used.</para>

<para>&kdesrc-build; will recognize that the <literal>kde-projects</literal>
repository requires special handling, and adjust the build process
appropriately.  Among other things, &kdesrc-build; will:</para>

<itemizedlist>

<listitem><para>Download the latest module database from <ulink
url=" https://commits.kde.org/">&kde; git archive</ulink>.</para></listitem>

<listitem><para>Try to find a module with the name given in the module set's
<option>use-modules</option> setting.</para></listitem>

<listitem><para>For every module that is found, &kdesrc-build; will see if a
repository setting exists for that module in the database. If there is a
repository, &kdesrc-build; will automatically use that to download or update
the source code. If there is no repository, &kdesrc-build; treats that module
like a group, and tries to include all &git; source repositories that it finds
in that group.</para></listitem>

</itemizedlist>

<note><para>In the current database, some module groups not only have a
collection of modules, but they <emphasis>also</emphasis> declare their own
&git; repository. In these situations &kdesrc-build; will currently prefer the
group's &git; repository instead of including the childrens' repositories.
</para></note>

<para>The following example shows how to use the &kde; module database to
install the Phonon multimedia library.</para>

<informalexample>
<programlisting>
module-set <replaceable>media-support</replaceable>
    # This option must be kde-projects to use the module database.
    <option><link linkend="conf-repository">repository</link></option> <literal>kde-projects</literal>

    # This option chooses what modules to look for in the database.
    <option><link linkend="conf-use-modules">use-modules</link></option> <replaceable>phonon/phonon</replaceable> <replaceable>phonon-gstreamer</replaceable> <replaceable>phonon-vlc</replaceable>
end module-set
</programlisting>
</informalexample>

<tip><para><literal>phonon/phonon</literal> is used since (with the current
project database) &kdesrc-build; would otherwise have to decide between the
group of projects called <quote>phonon</quote> or the individual project named
<quote>phonon</quote>. Currently &kdesrc-build; would pick the former, which
would build many more backends than needed.</para></tip>

<para>The following example is perhaps more realistic, and shows a feature only
available with the &kde; module database: Building all of the &kde; graphics
applications with only a single declaration.</para>

<informalexample>
<programlisting>
module-set <replaceable>kdegraphics</replaceable>
    # This option must be kde-projects to use the module database.
    <option><link linkend="conf-repository">repository</link></option> <literal>kde-projects</literal>

    # This option chooses what modules to look for in the database.
    <option><link linkend="conf-use-modules">use-modules</link></option> <literal>kdegraphics/libs</literal> <literal>kdegraphics/*</literal>
end module-set
</programlisting>
</informalexample>

<para>There are two important abilities demonstrated here:</para>

<orderedlist>

<listitem><para>&kdesrc-build; allows you to specify modules that are
descendents of a given module, without building the parent module, by using the
syntax <userinput><replaceable>module-name</replaceable>/*</userinput>. It is
actually required in this case since the base module, kdegraphics, is marked as
inactive so that it is not accidentally built along with its children modules.
Specifying the descendent modules allows &kdesrc-build; to skip around the
disabled module.
</para></listitem>

<listitem><para>&kdesrc-build; will also not add a given module to the build
list more than once. This allows us to manually set
<literal>kdegraphics/libs</literal> to build first, before the rest of
<literal>kdegraphics</literal>, without trying to build
<literal>kdegraphics/libs</literal> twice.
</para></listitem>
</orderedlist>

<note><para>It is worth noting that &kdesrc-build; will try to build modules
in the right order, such as if only <literal>kdegraphics/*</literal> had been
listed above, but this depends on other databases being kept up-to-date.  You
can manually list modules in the proper order if necessary by using the
technique described above.
</para></note>
</sect2>

<sect2 id="ignoring-project-modules">
<title>Filtering out &kde; project modules</title>

<para>You might decide that you'd like to build all programs within a &kde;
module grouping <emphasis>except</emphasis> for a given program.</para>

<para>For instance, the <literal>kdeutils</literal> group includes a program
named <application>kremotecontrol</application>. If your computer does not have
the proper hardware to receive the signals sent by remote controls then you may
decide that you'd rather not download, build, and install
<application>kremotecontrol</application> every time you update
<literal>kdeutils</literal>.</para>

<para>As of &kdesrc-build; 1.16, you can achieve this by using the <link
linkend="conf-ignore-modules">ignore-modules</link> configuration option.</para>

<example id="example-ignoring-a-module">
<title>Example for ignoring a kde-project module in a group</title>
<programlisting>
module-set <replaceable>utils</replaceable>
    <option><link linkend="conf-repository">repository</link></option> <literal>kde-projects</literal>

    # This option chooses what modules to look for in the database.
    <option><link linkend="conf-use-modules">use-modules</link></option> <replaceable>kdeutils</replaceable>

    # This option "subtracts out" modules from the modules chosen by use-modules, above.
    <option><link linkend="conf-ignore-modules">ignore-modules</link></option> <replaceable>kremotecontrol</replaceable>
end module-set

module-set <replaceable>graphics</replaceable>
    <option><link linkend="conf-repository">repository</link></option> <literal>kde-projects</literal>

    # This option chooses what modules to look for in the database.
    <option><link linkend="conf-use-modules">use-modules</link></option> <replaceable>extragear/graphics</replaceable>

    # This option "subtracts out" modules from the modules chosen by use-modules, above.
    # In this case, *both* extragear/graphics/kipi-plugins and
    # extragear/graphics/kipi-plugins/kipi-plugins-docs are ignored
    <option><link linkend="conf-ignore-modules">ignore-modules</link></option> <replaceable>extragear/graphics/kipi-plugins</replaceable>
end module-set
</programlisting>
</example>

</sect2>

</sect1>
