<?xml version="1.0" ?>
<!DOCTYPE book PUBLIC "-//KDE//DTD DocBook XML V4.5-Based Variant V1.1//EN" "dtd/kdedbx45.dtd" [
  <!--
    Documentation for kdesrc-build.
    Copyright (c) 2005-2008, 2010-2022 Michael Pyne <mpyne@kde.org>

    Copyright (c) 2005 Carlos Leonhard Woelz <carloswoelz@imap-mail.com>
    Copyright (c) 2009 Burkhard LÃ¼ck <lueck@hube-lueck.de>
    Copyright (c) 2007, 2011 Federico Zenith <federico.zenith@members.fsf.org>
    Copyright (c) 2009-2011 Yuri Chornoivan <yurchor@ukr.net>
    ... and possibly others. Check the git source repository for specifics.

    Permission is granted to copy, distribute and/or modify this document under
    the terms of the GNU Free Documentation License, Version 1.2 or any later
    version published by the Free Software Foundation; with no Invariant
    Sections, no Front-Cover Texts, and no Back-Cover Texts.

    A copy of the license is included in COPYING.DOC. The license will be
    included in the generated documentation as well.
   -->
  <!ENTITY kappname "kdesrc-build">
  <!ENTITY package "kdesdk">
  <!ENTITY % addindex "IGNORE">
  <!ENTITY % English "INCLUDE"> <!-- Change language only here -->
  <!ENTITY kdesrc-build "<application>kdesrc-build</application>">
  <!ENTITY BSD '<acronym>BSD</acronym>'>
  <!ENTITY git '<application>Git</application>'>
  <!ENTITY cmake '<application>CMake</application>'>
  <!ENTITY make '<application>Make</application>'>
  <!ENTITY ninja '<application>Ninja</application>'>
  <!ENTITY ssh '<application>SSH</application>'>
  <!ENTITY cron '<application>Cron</application>'>
  <!ENTITY sudo '<application>Sudo</application>'>
  <!ENTITY url '<acronym>URL</acronym>'>

  <!-- These define shortcut entities for some of the configuration options.
       Just add them as necessary.
  -->

  <!ENTITY configure-flags '<link linkend="conf-configure-flags">configure-flags</link>'>
  <!ENTITY install-dir '<link linkend="conf-install-dir">install-dir</link>'>
  <!ENTITY qtdir '<link linkend="conf-qtdir">qtdir</link>'>
  <!ENTITY build-dir '<link linkend="conf-build-dir">build-dir</link>'>
  <!ENTITY source-dir '<link linkend="conf-source-dir">source-dir</link>'>
  <!ENTITY colorful-output '<link linkend="conf-colorful-output">colorful-output</link>'>
  <!ENTITY tag '<link linkend="conf-tag">tag</link>'>
  <!ENTITY branch '<link linkend="conf-branch">branch</link>'>
  <!ENTITY do-not-compile '<link linkend="conf-do-not-compile">do-not-compile</link>'>
  <!ENTITY repository '<link linkend="conf-repository">repository</link>'>
  <!ENTITY make-install-prefix '<link linkend="conf-make-install-prefix">make-install-prefix</link>'>
  <!ENTITY niceness '<link linkend="conf-niceness">niceness</link>'>
  <!ENTITY set-env '<link linkend="conf-set-env">set-env</link>'>
  <!ENTITY libname '<link linkend="conf-libname">libname</link>'>
  <!ENTITY libpath '<link linkend="conf-libpath">libpath</link>'>
  <!ENTITY binpath '<link linkend="conf-binpath">binpath</link>'>

  <!-- These define shortcut entities for some of the command line options.
       Just add them as necessary.
  -->
  <!ENTITY cmd-nice '<link linkend="cmdline-nice">--nice</link>'>
  <!ENTITY cmd-ignore-modules '<link linkend="cmdline-ignore-modules">--ignore-modules</link>'>
  <!ENTITY cmd-resume-from '<link linkend="cmdline-resume-from">--resume-from</link>'>
  <!ENTITY cmd-resume-after '<link linkend="cmdline-resume-after">--resume-after</link>'>
  <!ENTITY cmd-reconfigure '<link linkend="cmdline-reconfigure">--reconfigure</link>'>
  <!ENTITY cmd-refresh-build '<link linkend="cmdline-refresh-build">--refresh-build</link>'>

  <!-- These define docbook files to include.
       Just add them as necessary.
  -->
  <!ENTITY advanced-features SYSTEM "advanced-features.docbook">
  <!ENTITY appendix-modules SYSTEM "appendix-modules.docbook">
  <!ENTITY appendix-profile SYSTEM "appendix-profile.docbook">
  <!ENTITY basic-features SYSTEM "basic-features.docbook">
  <!ENTITY building-and-troubleshooting SYSTEM "building-and-troubleshooting.docbook">
  <!ENTITY building-specific-modules SYSTEM "building-specific-modules.docbook">
  <!ENTITY cmdline SYSTEM "cmdline.docbook">
  <!ENTITY conf-options-table SYSTEM "conf-options-table.docbook">
  <!ENTITY configure-data SYSTEM "configure-data.docbook">
  <!ENTITY credits-and-license SYSTEM "credits-and-license.docbook">
  <!ENTITY developer-features SYSTEM "developer-features.docbook">
  <!ENTITY environment SYSTEM "environment.docbook">
  <!ENTITY features SYSTEM "features.docbook">
  <!ENTITY getting-started SYSTEM "getting-started.docbook">
]>

<book id="kdesrc-build" lang="&language;">

<bookinfo>
<title>&kdesrc-build; Script Manual</title>

<authorgroup id="authors">
    <author>&Michael.Pyne; &Michael.Pyne.mail;</author>
    <author>
        <personname><firstname>Carlos</firstname><surname>Woelz</surname></personname>
        <email>carloswoelz@imap-mail.com</email>
    </author>

<!-- TRANS:ROLES_OF_TRANSLATORS -->

</authorgroup>

<copyright>
<year>2006</year>
<year>2007</year>
<year>2008</year>
<year>2009</year>
<year>2010</year>
<year>2011</year>
<year>2012</year>
<year>2013</year>
<year>2014</year>
<year>2015</year>
<year>2016</year>
<year>2017</year>
<year>2018</year>
<year>2019</year>
<holder>Michael Pyne</holder>
</copyright>

<copyright>
<year>2005</year>
<holder>Carlos Woelz</holder>
</copyright>

<legalnotice>&FDLNotice;</legalnotice>

<date>2018-01-20</date>
<releaseinfo>&kdesrc-build; 17.12</releaseinfo>

<abstract>
<para>&kdesrc-build; is a script which builds and installs &kde; software
directly from the &kde; project's source code repositories.</para>
</abstract>

<keywordset>
<keyword>KDE</keyword>
<keyword>kdesdk</keyword>
<keyword>git</keyword>
<keyword>KDE development</keyword>
</keywordset>

</bookinfo>

<chapter id="introduction">
<title>Introduction</title>

<sect1 id="brief-intro">
<title>A brief introduction to &kdesrc-build;</title>

<sect2 id="whatis-kdesrc-build">
<title>What is &kdesrc-build;?</title>

<para>
&kdesrc-build; is a script to help the &kde; community install <ulink
url="https://www.kde.org/">&kde;</ulink> software from its <ulink
url="https://git-scm.com/">&git;</ulink> source repositories,
and continue to update that software afterwards.
It is particularly intended to support those who need to supporting testing and
development of &kde; software, including users testing bugfixes and developers
working on new features.
</para>

<para>The &kdesrc-build; script can be configured to maintain a single individual
module, a full &plasma; desktop with &kde; application set, or somewhere in between.
</para>

<para>To get started, see <xref linkend="getting-started"/>, or continue reading for more
detail on how &kdesrc-build; works and what is covered in this documentation.
</para>
</sect2>

<sect2 id="operation-in-a-nutshell">
<title>&kdesrc-build; operation <quote>in a nutshell</quote></title>

<para>&kdesrc-build; works by using the tools available to the user at the
command-line, using the same interfaces available to the user. When
&kdesrc-build; is run, the following sequence is followed: </para>

<orderedlist>
<listitem><para>&kdesrc-build; reads in the <link linkend="cmdline">command
line</link> and <link linkend="configure-data">configuration file</link>, to
determine what to build, compile options to use, where to install,
&etc;</para></listitem>

<listitem><para>&kdesrc-build; performs a source update for each <link
linkend="module-concept">module</link>. The update continues until all modules
have been updated. Modules that fail to update normally do not stop the build
&ndash; you will be notified at the end which modules did not
update.</para></listitem>

<listitem><para>Modules that were successfully updated are built, have their
test suite run, and are then installed.  To reduce the overall time spent,
&kdesrc-build; will by default start building the code as soon as the first
module has completed updating, and allow the remaining updates to continue
behind the scenes.
</para></listitem>
</orderedlist>

<tip><para>A <emphasis>very good</emphasis> overview of how &kde; modules are
built, including informative diagrams, is provided on <ulink
url="https://www.davidrevoy.com/article193/guide-building-krita-on-linux-for-
cats">an online article discussing &kde;'s &krita; application</ulink>.  This
workflow is what &kdesrc-build; automates for all &kde; modules.</para>
</tip>

</sect2>
</sect1>

<sect1 id="intro-toc">
<title>Documentation Overview</title>

<para>
This guide is an overview to describe the following aspects of &kdesrc-build;
operation:
</para>

<itemizedlist>
<listitem><para>An <link linkend="getting-started">overview</link> of the steps
required to get started.</para></listitem>
<listitem><para>Notable <link linkend="features">features</link>.</para></listitem>
<listitem><para>The <link linkend="configure-data">configuration file</link> syntax
and options.</para></listitem>
<listitem><para>The <link linkend="cmdline">command line options</link>.</para></listitem>
</itemizedlist>

<para>Also documented are the steps which you should perform using
other tools (&ie; steps that are not automatically performed by &kdesrc-build;).
</para>

</sect1>
</chapter>

&getting-started;

&features;

<chapter id="kdesrc-buildrc">
<title>Configuring &kdesrc-build;</title>

<sect1 id="kdesrc-buildrc-overview">
<title>Overview of &kdesrc-build; configuration</title>

<para>
To use the script, you must have a file in your home directory called
<filename>.kdesrc-buildrc</filename>, which describes the modules you would
like to download and build, and any options or configuration parameters to
use for these modules.
</para>

<sect2 id="kdesrc-buildrc-layout">
<title>Layout of the configuration file</title>

<sect3 id="kdesrc-buildrc-layout-global">
<title>Global configuration</title>

<para>
The configuration file starts with the global options, specified like the
following:
</para>

<programlisting>
global
<replaceable>option-name option-value</replaceable>
<replaceable>[...]</replaceable>
end global
</programlisting>

</sect3>
<sect3 id="kdesrc-buildrc-layout-modules">
<title>Module configuration</title>

<para>
It is then followed by one or more module sections, specified in one of the
following two forms:
</para>

<itemizedlist>
<listitem>
<programlisting>
module <replaceable>module-name</replaceable>
<replaceable>option-name option-value</replaceable>
<replaceable>[...]</replaceable>
end module
</programlisting>
</listitem>

<listitem>
<programlisting>
module-set <replaceable>module-set-name</replaceable>
  repository <userinput>kde-projects</userinput> or <userinput><replaceable>git://host.org/path/to/repo.git</replaceable></userinput>
  use-modules <replaceable>module-names</replaceable>

# Other options may also be set
<replaceable>option-name option-value</replaceable>
<replaceable>[...]</replaceable>
end module-set
</programlisting>
</listitem>
</itemizedlist>

<important><para>Note that the second form, module sets, <emphasis>only works
for Git-based modules</emphasis>.</para></important>

<para>
For Git modules, <replaceable>module-name</replaceable> must be a module
from the &kde; &git; repository (for example, kdeartwork or
kde-wallpapers).
</para>

<para>
For Git modules, the module name can be essentially whatever you'd like, as
long as it does not duplicate any other module name in the configuration. Keep
in mind the source and build directory layout will be based on the module name
if you do not use the <link linkend="conf-dest-dir">dest-dir</link> option.
</para>

<para>However, for Git <emphasis>module sets</emphasis> the
<replaceable>module-names</replaceable> must correspond with actual git modules
in the chosen <option>repository</option>. See <link
linkend="conf-git-repository-base">git-repository-base</link> or <link
linkend="conf-use-modules">use-modules</link> for more information.
</para>

</sect3>

<sect3 id="kdesrc-buildrc-option-values">
<title>Processing of option values</title>

<para>In general, the entire line contents after the
<replaceable>option-name</replaceable> is used as the
<replaceable>option-value</replaceable>.</para>

<para>One modification that &kdesrc-build; performs is that a sequence
<userinput>${<replaceable>name-of-option</replaceable>}</userinput> is replaced
with the value of that option from the global configuration. This allows you
to reference the value of existing options, including options already set by
&kdesrc-build;.</para>

<para>
To see an example of this in use, see
<xref linkend="make-options-example"/>.</para>

</sect3>

<sect3 id="kdesrc-buildrc-options-groups">
<title><quote>options</quote> modules</title>

<para>There is a final type of configuration file entry,
<literal>options</literal> groups, which may be given wherever a
<literal>module</literal> or <literal>module-set</literal> may be used.</para>

<programlisting>
options <replaceable>module-name</replaceable>
<replaceable>option-name option-value</replaceable>
<replaceable>[...]</replaceable>
end options
</programlisting>

<para>An <literal>options</literal> group may have options set for it just like
a module declaration, and is associated with an existing module. Any options
set these way will be used to <emphasis>override</emphasis> options set for the
associated module.</para>

<important><para>The associated module name <emphasis>must</emphasis> match the
name given in the <literal>options</literal> declaration. Be careful of
mis-typing the name.</para></important>

<para>This is useful to allow for declaring an entire
<literal>module-set</literal> worth of modules, all using the same options, and
then using <literal>options</literal> groups to make individual changes.</para>

<para><literal>options</literal> groups can also apply to named module sets.
This allows expert users to use a common configuration file (which includes
<literal>module-set</literal> declarations) as a baseline, and then make changes
to the options used by those module-sets in configuration files that
use the <literal><link
linkend="kdesrc-buildrc-including">include</link></literal> command to reference
the base configuration.</para>

<example id="ex-options-group">
<title>Example of using options</title>

<para>In this example we choose to build all modules from the &kde; multimedia
software grouping. However we want to use a different version of the &kmix;
application (perhaps for testing a bug fix). It works as follows:</para>

<programlisting>
module-set <replaceable>kde-multimedia-set</replaceable>
  repository <userinput>kde-projects</userinput>
  use-modules <replaceable>kde/kdemultimedia</replaceable>
  branch <replaceable>master</replaceable>
end module-set

# kmix is a part of kde/kdemultimedia group, even though we never named
# kmix earlier in this file, &kdesrc-build; will figure out the change.
options <replaceable>kmix</replaceable>
  branch <replaceable>KDE/4.12</replaceable>
end options
</programlisting>

<para>Now when you run &kdesrc-build;, all of the &kde; multimedia programs will
be built from the <quote>master</quote> branch of the source repository, but
&kmix; will be built from the older <quote>KDE/4.12</quote> branch. By using
<literal>options</literal> you didn't have to individually list all the
<emphasis>other</emphasis> &kde; multimedia programs to give them the right
branch option.</para>

</example>

<note>
<para>Note that this feature is only available in &kdesrc-build; from version
1.16, or using the development version of &kdesrc-build; after
2014-01-12.</para></note>

</sect3>

</sect2>

<sect2 id="kdesrc-buildrc-including">
<title>Including other configuration files</title>

<para>
Within the configuration file, you may reference other files by using the
<literal>include</literal> keyword with a file, which will act as if the file
referenced had been inserted into the configuration file at that point.
</para>

<informalexample><para>For example, you could have something like this:</para>
<programlisting>
global
    include <replaceable>~/common-kdesrc-build-options</replaceable>

    # Insert specific options here.

end global
</programlisting>
</informalexample>

<note><para>If you don't specify the full path to the file to include, then
the file will be searched for starting from the directory containing the source
file. This works recursively as well.</para></note>

</sect2>

<sect2 id="kdesrc-buildrc-common">
<title>Commonly used configuration options</title>

<para>
The following is a list of commonly-used options. Click on the
option to find out more about it. To see the full list of options, see
<xref linkend="conf-options-table"/>.
</para>

<itemizedlist>
<listitem><para><link linkend="conf-cmake-options">cmake-options</link> to define what flags to configure a module with using &cmake;.</para></listitem>
<listitem><para><link linkend="conf-branch">branch</link>, to checkout from a branch instead of <literal>master</literal>.</para></listitem>
<listitem><para><link linkend="conf-configure-flags">configure-flags</link> to define what flags to configure &Qt; with.</para></listitem>
<listitem><para><link linkend="conf-install-dir">install-dir</link>, to set the directory to install &kde; to.</para></listitem>
<listitem><para><link linkend="conf-make-options">make-options</link>, to pass options to the &make; program (such as number of CPUs to use).</para></listitem>
<listitem><para><link linkend="conf-qtdir">qtdir</link>, to set the path to &Qt;.</para></listitem>
<listitem><para><link linkend="conf-source-dir">source-dir</link>, to change where to download the source code to.</para></listitem>
</itemizedlist>

</sect2>
</sect1>
&conf-options-table;
</chapter>

&cmdline;

<chapter id="using-kdesrc-build">
<title>Using &kdesrc-build;</title>

<sect1 id="using-kdesrc-build-preface">
<title>Preface</title>

<para>Normally using &kdesrc-build; after you have gone through <xref linkend="getting-started" />
is as easy as doing the following from a terminal prompt:</para>

<screen>
<prompt>&percnt;</prompt> <command><userinput>kdesrc-build</userinput></command>
</screen>

<para>&kdesrc-build; will then download the sources for &kde;, try to configure
and build them, and then install them.</para>

<para>Read on to discover how &kdesrc-build; does this, and what else you can
do with this tool.</para>

</sect1>

&basic-features;

&advanced-features;

&developer-features;

<sect1 id="other-features">
<title>Other &kdesrc-build; features</title>

<sect2 id="changing-verbosity">
<title>Changing the amount of output from &kdesrc-build;</title>
<para>&kdesrc-build; has several options to control the amount of output the
script generates. In any case, errors will always be output.</para>

<itemizedlist>
<listitem><para>The <option>--quiet</option> option (short form is
<option>-q</option>) causes &kdesrc-build; to be mostly silent. Only important
messages, warnings, or errors will be shown. When available, build progress
information is still shown.</para></listitem>

<listitem><para>The <option>--really-quiet</option> option (no short form)
causes &kdesrc-build; to only display important warnings or errors while it is
running.</para></listitem>

<listitem><para>The <option>--verbose</option> option (short form is
<option>-v</option>) causes &kdesrc-build; to be very detailed in its
output.</para></listitem>

<listitem><para>The <option>--debug</option> option is for debugging purposes
only, it causes &kdesrc-build; to act as if <option>--verbose</option> was
turned on, causes commands to also output to the terminal, and will display
debugging information for many functions.</para></listitem>
</itemizedlist>

</sect2>

<sect2 id="kdesrc-build-color">
<title>Color output</title>
<para>When being run from &konsole; or a different terminal, &kdesrc-build;
will normally display with colorized text.</para>

<para>You can disable this by using the <option>--no-color</option> on the
command line, or by setting the &colorful-output; option in the <link linkend="configure-data">configuration file</link> to
<userinput>false</userinput>.
</para>

<informalexample>
<para>Disabling color output in the configuration file:</para>
<screen>
global
  colorful-output false
end global
</screen>
</informalexample>

</sect2>

<sect2 id="deleting-build-dir">
<title>Removing unneeded directories after a build</title>
<para>Are you short on disk space but still want to run a bleeding-edge
&kde; checkout?  &kdesrc-build; can help reduce your disk usage when building
&kde; from &git;.</para>

<note><para>Be aware that building &kde; does take a lot of space. There are
several major space-using pieces when using &kdesrc-build;:</para></note>

<orderedlist>
<listitem><para>The actual source checkout can take up a fair amount of space.
The default modules take up about 1.6 gigabytes of on-disk space. You can reduce
this amount by making sure that you are only building as many modules as you
actually want. &kdesrc-build; will not delete source code from disk even if you
delete the entry from the <link linkend="configure-data">configuration file</link>, so make sure that you go and delete unused
source checkouts from the source directory. Note that the source files are
downloaded from the Internet, you <emphasis>should not</emphasis> delete them
if you are actually using them, at least until you are done using
&kdesrc-build;.</para>

<para>Also, if you already have a &Qt; installed by your distribution (and
the odds are good that you do), you probably do not need to install the
qt module. That will shave about 200 megabytes off of the on-disk source
size.</para>
</listitem>

<listitem>
<para>&kdesrc-build; will create a separate build directory to build the source
code in. Sometimes &kdesrc-build; will have to copy a source directory to
create a fake build directory. When this happens, space-saving symlinks are
used, so this should not be a hassle on disk space. The build directory will
typically be much larger than the source directory for a module. For example,
the build directory for kdebase is about 1050 megabytes, whereas kdebase's
source is only around 550 megabytes.</para>

<para>Luckily, the build directory is not required after a module has
successfully been built and installed. &kdesrc-build; can automatically
remove the build directory after installing a module, see the examples below
for more information. Note that taking this step will make it impossible
for &kdesrc-build; to perform the time-saving incremental builds.</para>
</listitem>

<listitem><para>
Finally, there is disk space required for the actual installation of
&kde;, which does not run from the build directory. This typically takes less
space than the build directory. It is harder to get exact figures however.
</para></listitem>
</orderedlist>

<para>How do you reduce the space requirements of &kde;?  One way is to
use the proper compiler flags, to optimize for space reduction instead of
for speed. Another way, which can have a large effect, is to remove debugging
information from your &kde; build.
</para>

<warning><para>
You should be very sure you know what you are doing before deciding to remove
debugging information. Running bleeding-edge software means you are running
software which is potentially much more likely to crash than a stable release.
If you are running software without debugging information, it can be very
hard to create a good bug report to get your bug resolved, and you will likely
have to re-enable debugging information for the affected application and
rebuild to help a developer fix the crash. So, remove debugging information
at your own risk!
</para></warning>

<informalexample>
<para>Removing the build directory after installation of a module. The source
directory is still kept, and debugging is enabled:</para>

<screen>
global
  configure-flags      --enable-debug
  remove-after-install builddir        # Remove build directory after install
end global
</screen>

<para>Removing the build directory after installation, without debugging
information, with size optimization.</para>

<screen>
global
  cxxflags             -Os             # Optimize for size
  configure-flags      --disable-debug
  remove-after-install builddir        # Remove build directory after install
end global
</screen>
</informalexample>
</sect2>

</sect1>

</chapter>

<chapter id="kde-cmake">
<title>&cmake;, the &kde; build system</title>

<sect1 id="kde-cmake-intro">
<title>Introduction to &cmake;</title>

<para>In March 2006, the &cmake; program
beat out several competitors and was selected to be the build system for &kde; 4, replacing the
autotools-based system that &kde; had used from the beginning.</para>

<para>A introduction to &cmake; page is available on the <ulink
url="https://community.kde.org/Guidelines_HOWTOs/CMake">&kde; Community Wiki</ulink>.
Basically, instead of running <userinput><command>make</command> <option>-f</option>
<filename>Makefile.cvs</filename></userinput>, then <command>configure</command>,
then &make;, we simply run &cmake; and then &make;.
</para>

<para>&kdesrc-build; has support for &cmake;. A few features of &kdesrc-build;
were really features of the underlying buildsystem, including
<link linkend="conf-configure-flags">configure-flags</link>
and <link linkend="conf-do-not-compile">do-not-compile</link>. When equivalent
features are available, they are provided. For instance, the equivalent to the
configure-flags option is <link linkend="conf-cmake-options">cmake-options</link>, and the
<link linkend="conf-do-not-compile">do-not-compile</link> option is also supported for &cmake;
as of &kdesrc-build; version 1.6.3.
</para>

</sect1>
</chapter>

&credits-and-license;

&appendix-modules;

&appendix-profile;
</book>
